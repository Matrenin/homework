	Сейчас JavaScript может использоваться не только в браузерах, он стал кроссплатформенным языком программирования. Каждая среда предоставляет свою функциональность по мимо основной и называется окружением. Корневой объект window выступает в двух ролях: глобальный объект для JavaScript и окно браузера. 

	DOM - объектная модель документа, это интерфейс, который рассматривает HTML-документы в виде древовидных структур, каждый узел который является объектом документа. Объект document – основная «входная точка» в DOM. С его помощью мы можем что-то создавать или менять на странице.

	Объектная модель браузера (Browser Object Model, BOM) – это дополнительные объекты, предоставляемые браузером (окружением), чтобы работать со всем, кроме документа.
	
	Все, что есть в HTML, даже комментарии, является частью DOM. В мире DOM null означает «не существует».

	ChildNodes - содержит список всех детей, включая текстовые узлы. Является коллекцией, а не массивом - особый перебираемый объект-псевдомассив.

	Соседи – это узлы, у которых один и тот же родитель. Следующий узел того же родителя (следующий сосед) – в свойстве nextSibling, а предыдущий – в previousSibling. Родитель доступен через parentNode.

	HTMLCollection представляет собой динмаческую структуру данных, а NodeList - статическую структуру данных. То есть HTMLCollection обновляется каждый раз, когда меняется количество элементов, полученных с помощью соответствующего метода. HTMLCollection получаем методом getElementBy..., а NodeList методом querySelector("...");

	console.log(elem) - выводит элемент в виде DOM-дерева.
	console.dir(elem) - выводит элемент в виде DOM-объекта, что удобно для анализа его свойст.

	В HTML-режиме значения tagName/nodeName всегда записаны в верхнем регистре.

	Когда браузер загружает страницу, он «читает» («парсит») HTML и генерирует из него DOM-объекты. Для узлов-элементов большинство стандартных HTML-атрибутов автоматически становятся свойствами DOM-объектов. HTML-атрибуты являются регистронезависимыми и их значения всегда строки.

	Когда стандартный атрибут изменяется, соответствующее свойство автоматически обновляется. Это работает и в обратную сторону за исключением input.value, синхронизируется в одну сторону (атрибут -> значение).
 	



	МЫСЛИ:
Каждый тег является объектом как и текст. У текстового узла не могут быть потомки, он находится на самом нижнем уровне вложености. Перед тегом head не может быть текстового узла(пробела) и после тега body. Автоисправление - если вы забыли написать какой то тег такой как(head, body) браузер автоматически их создаст. Комментарий - еще один вид узла. Правило гласит так - если есть что то в html-документе, оно должно быть в DOM. Если у нас есть несколько элементов с одним и тем же id, то использую метод getElementById работает не предсказуемо и может вернуть любой элемент.

У каждого узла есть свои свойства, в зависимости от тега. Но у всех узлов есть общие свойства. Узлы образуют единую иерархию. Корнем иерархии является  EventTarget.

Дом создается когда браузер парсит html и теги становятся объектами, а их атрибуты свойствами. ДОМ-свойства не всегда являются строками. Например свойство checkbox у input имеет булевый тип данных.
















