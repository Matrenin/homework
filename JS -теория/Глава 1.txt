	----------- DOM -------------

	DOM - Это интерфейс, который рассматривает HTML-документы в виде древовидных структур, каждый узел который является объектом документа *. Это программный интерфейс между HTML и JavaScript. 

	1. Чем отличаются элементы от узлов?
	Элемент - это узел, который объявлен с использованием тега в HTML-документе. А  узел может быть еще и просто текстом внутри тегов.

	Событие срабатывает при всплытии. Когда на элементе происходит событие, обработчики сначала срабатывают на нём, потом на его родителе, затем выше и так далее, вверх по цепочке предков.

	Event.target - "целевой элемент". Самый глубоко вложенный элемент, на котором произошло событие.

	Event.currentTarget - определяет элемент, в котором в данный момент обрабатывается событие, при движении события внутри DOM.

	2. Разница между HTMLCollection и NodeList?
	HTMLCollection представляет собой динмаческую структуру данных, а NodeList - статическую структуру данных. То есть HTMLCollection обновляется каждый раз, когда меняется количество элементов, полученных с помощью соответствующего метода.

	CurrentTarget - определяет элемент, в котором в данный момент обрабатывается событие, при движении событий внутри DOM.

	----------- OOP -------------

	ООП — это способ написания кода, позволяющий создавать объекты с помощью одного объекта. 	

	Prototype - это объект, который расширяет наш объект. Мы внутри прототипа ищем свойства, если не нашли в основном объекте. У любого объекта может быть свой прототип, а может и не быть.

	Функции которые лежат в свойстве объекта называют методами.

	This - это ссылка на сам объект. В this будет лежать то, что было слева от точки в момент вызова.

	Разница __proto__ и prototype:
Когда мы пишем toBeep.__proto__ - мы получаем прототип текущего объекта(toBeep). Function.prototype - это свойство у функций. И в этом свойстве лежит объект, который будет использоваться как прототип для всех объектов, которые будут созданы от этой функции конструткора(Function).

	Прототипное наследование -  возможность создать новый объект на основе другого объекта, с его методами и свойствами, не копируя их.












