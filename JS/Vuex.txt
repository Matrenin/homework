	Vuex использует единое дерево состояния — когда один объект содержит всё глобальное состояние приложения и служит «единственным источником истины».

	Store.state - получить доступ к объекту состояния.
	Store.commit("name_methods") - вызвать изменение состояния.

	Использование состояния хранилища в компоненте предполагает просто возврат необходимой части состояния в вычисляемом свойстве, поскольку состояние хранилища реактивно. Инициирование изменений — это просто запуск мутаций в методах компонентов.

	Указывая опцию store в корневом экземпляре, мы обеспечиваем доступ к хранилищу во всех дочерних компонентах через this.$store.

	Когда компонент должен использовать множество свойств или геттеров хранилища, можно использовать функцию mapState, которая автоматически генерирует вычисляемые свойства.

	Поскольку mapState возвращает объект, для использования в сочетании с другими локальными вычисляемыми свойствами, используется оператор распространения объектов(...mapState).

	Геттеры - можете считать их вычисляемыми свойствами хранилища. Как и вычисляемые свойства, результаты геттера кэшируются, на основе его зависимостей и пересчитываются только при изменении одной из зависимостей. Геттеры получают состояние хранилища первым аргументом. Вторым аргументом передаются другие геттеры.

	Геттеры, доступ к которым выполняется как к методам, будут запускаться каждый раз при их вызове, а результаты не будут кэшироваться.

	Функция mapGetters просто проксирует геттеры хранилища в локальные вычисляемые свойства компонента.

	Мутации - единственный способ изменения состояния хранилища во Vuex. Каждая мутация имеет строковый тип и функцию-обработчик. В этом обработчике и происходят, собственно, изменения состояния, переданного в функцию первым аргументом.

	Чтобы инициировать обработку мутации, необходимо вызвать store.commit, указав её тип.

	Oбработчики мутаций обязаны быть синхронными.

	Действия(actions) — похожи на мутации с несколькими отличиями. Во первых место того, чтобы напрямую менять состояние, действия инициируют мутации. Во вторых действия могут использоваться для асинхронных операций.
	

















