	Ссылки не могут идти по кругу. JavaScript выдаст ошибку, если мы попытаемся назначить __proto__ по кругу. Значение __proto__ может быть объектом или null. Другие типы игнорируются. Может быть только один [[Prototype]]. Объект не может наследоваться от двух других объектов.

	Метод hasOwnProperty() возвращает логическое значение, указывающее, содержит ли объект указанное свойство.

	Если в F.prototype содержится объект, оператор new устанавливает его в качестве [[Prototype]] для нового объекта.

	F.prototype используется только при вызове new F() и присваивается в качестве свойства [[Prototype]] нового объекта. После этого F.prototype и новый объект ничего не связывает.

	У каждой функции по умолчанию уже есть свойство "prototype". По умолчанию "prototype" – объект с единственным свойством constructor, которое ссылается на функцию-конструктор.

	Когда вызывается new Object() (или создаётся объект с помощью литерала {...}), свойство [[Prototype]] этого объекта устанавливается на Object.prototype.

	Как мы помним, примитивы не объекты. Но если мы попытаемся получить доступ к их свойствам, то тогда будет создан временный объект-обёртка с использованием встроенных конструкторов String, Number и Boolean, который предоставит методы и после этого исчезнет. Специальные значения null и undefined стоят особняком. У них нет объектов-обёрток, так что методы и свойства им недоступны. Также у них нет соответствующих прототипов.

	















	