	v-model
> Cвязывание данных, позволяет синхронизировать данные и их отображение.

	v-if
> Позволяет скрывать и показывать элементы в зависимости от условий.

	v-for
> Используется для генирации повторяющегося кода html-шаблона.

	v-bind(:)
> Директива с помощью которой можно связать атрибуты тега с выражением, или же входной параметр компонента. Если эту директиву используют с атрибутами style и class то можно использовать объект в качестве передачи большого количества разных значений.
	
 	Вычисляемое свойство – функция, которая обрабатывает исходные данные и возвращает новое значение.

	Компоненты — это переиспользуемые экземпляры Vue со своими предустановленными опциями и  именем. 

	<slot>
Содержимое, которое находится между открывающим и закрывающим тегами компонента, можно пробрасывать внутрь и подставлять в шаблон. Для подстановки содержимого используется тег <slot>.

	data()
В компонентах данные тоже хранятся в поле data, но здесь это не объект, а функция, возвращающая объект. Для того, чтобы каждый экземпляр компонента управлял собственной независимой копией возвращаемого объекта данных.

	Props(входные параметры) — это способ передачи данных из родительского компонента ниже в дочерний. Когда значение передаётся в атрибут входного параметра, оно становится свойством экземпляра компонента.

	$parent 
> Доступ к экземпляру родительского компонента.
Свойство $parent можно использовать для доступа к родительскому экземпляру из дочернего.

	$root
> Доступ к корневому экземпляру.
С помощью свойства $root все дочерние компоненты могут получить доступ к корневому экземляру и использовать его в качестве глобального хранилища.

	ref
> Доступ к экземплярам дочерних компонентов и элементов. С помощью атрибута ref для html-элемента устанавливается ключ, через который потом можно ссылаться на этот элемент. В методах объекта Vue можно обратиться к элементу по установленному ключу через объект $refs.

	Реактивности — это механизм, который автоматически синхронизирует источник данных (модель) со слоем представления данных (представления). Каждый раз, когда модель изменяется, вид перерисовывается заново, чтобы отразить изменения.

	Компоненты, зарегистрированные глобально(Vue.component), могут использоваться в шаблоне любого корневого экземпляра Vue (new Vue) созданного впоследствии — и даже внутри всех компонентов, расположенных в дереве компонентов этого экземпляра Vue.






	Хуки жизненного цикла позволяют узнать, как устроена внутренняя работа библиотек, которые вы используете. С их помощью вы можете определить, что компонент был создан, добавлен в DOM, обновлен или уничтожен.

	Хуки:
> beforecreate - выполняется прямо во время инициализации компонента. Данные ещё не стали реактивными, а события не настроены.
> created - вы сможете получить доступ к реактивным данным и активным событиям. Шаблоны и виртуальный DOM ещё не встроены (mounted) и не отрисованы.
> beforeMount - выполняется до первичной отрисовки, а также после компилирования шаблона или функций отрисовки. Вероятно, вам никогда не потребуется использовать этот хук. Помните, что он не вызывается в ходе отрисовки на стороне сервера.
> mounted - вы получите полный доступ к реактивному компоненту, шаблонам и отрисованному DOM.
> beforeUpdate - выполняется после изменения данных в компоненте и начала цикла обновления, сразу перед патчингом и перерисовкой DOM. Этот хук позволяет получить новое состояние любых реактивных данных в компоненте, прежде чем он будет отрисован.
> updated - вызывается после изменения данных в компоненте и перерисовки DOM. Если вам нужно получить доступ к DOM после изменения свойства, такой хук — самое безопасное место для этого.
> beforeDestroy - выполняется непосредственно перед монтажом. Ваш компонент ещё полностью функционирует. Если вам нужно очистить события или реактивные подписки, то beforeDestroy — самое подходящее для этого место.
> destroyed - К тому моменту, как вы добрались до хука destroyed, от вашего компонента мало что осталось. Всё, что было к нему прикреплено, уже уничтожено. Вы можете использовать хук для последней очистки или, словно подлый тихушник, проинформировать удалённый сервер об уничтожении компонента.












