	map()
Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.
> const newArray = arr.map(callBack);
callBack - Функция, вызываемая для каждого элемента массива arr. Каждый раз, когда callback выполняется, возвращаемое значение добавляется в new_array.

	splice()
Метод splice() изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.
> array.splice(start, delete, item);
START - Индекс, по которому начинает изменять массив. Если больше длины массива, реальный индекс будет установлен на длину массива. Если отрицателен, указывает индекс элемента с конца.
DELETE- Целое число, показывающее количество старых удаляемых из массива элементов. Если deleteCount равен 0, элементы не удаляются. В этом случае вы должны указать как минимум один новый элемент. Если delete больше количества элементов, оставшихся в массиве, начиная с индекса start, то будут удалены все элементы до конца массива.
ITEM - Необязательные параметры. Добавляемые к массиву элементы. Если вы не укажете никакого элемента, splice() просто удалит элементы из массива.

	Метод find() возвращает значение первого найденного в массиве элемента, которое удовлетворяет условию переданному в callback функции.  В противном случае возвращается undefined.

	Метод Object.assign() используется для копирования значений всех собственных перечисляемых свойств из одного или более исходных объектов в целевой объект. После копирования он возвращает целевой объект.
> Object.assign(target, ...sources)
target - Целевой объект.
sources - Исходные объекты.

	Метод filter() создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.

	Метод sort() на месте сортирует элементы массива и возвращает отсортированный массив. Сортировка не обязательно устойчива (англ.). Порядок сортировки по умолчанию соответствует порядку кодовых точек Unicode. Если в callBack функции первый параметр больше второго, то сортировка будет осуществляться по возрастанию, в противном случае наоборот.

	Метод at() принимает значение в виде целого числа и возвращает элемент массива с данным индексом. В качестве аргумента метод принимает положительные и отрицательные числа. При отрицательном значении отсчёт происходит с конца массива.

	Метод indexOf() возвращает первый индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.
	
	Метод split() разбивает объект String на массив строк путём разделения строки указанной подстрокой. В качестве параметра указывает символы, используемые в качестве разделителя внутри строки.

	==============

	Метод Window.getComputedStyle() возвращает объект, содержащий значения всех CSS-свойств элемента, полученных после применения всех активных таблиц стилей, и завершения базовых вычислений значений, которые они могут содержать.

	Метод getPropertyValue() возвращает значение указанного свойства CSS.
> let value = style.getPropertyValue(property);
property - это DOMString представляющий имя свойства, которое должно быть обработано.

	Метод reduce() применяет функцию reducer к каждому элементу массива (слева-направо), возвращая одно результирующее значение.

	Метод  Object.values() возвращает массив значений перечисляемых свойств объекта в том же порядке что и цикл for...in. Разница между циклом и методом в том, что цикл перечисляет свойства и из цепочки прототипов.

	Метод Array.isArray() возвращает true, если объект является массивом и false, если он массивом не является.

	Метод Element.closest() возвращает ближайший родительский элемент (или сам элемент), который соответствует заданному CSS-селектору или null, если таковых элементов вообще нет.














