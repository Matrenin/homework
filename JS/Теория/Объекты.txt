	Объекты используются для хранения коллекций различных значений и более сложных сущностей.

	Литерал объекта - это способ создания объекта с помощью фигурных скобок.

	Существует два доступа к свойствам объекта: через точку и квадратные скобки. Квадратные скобки позволяют использовать любые имена свойств и переменные. 

	Термин «целочисленное свойство» означает строку, которая может быть преобразована в целое число и обратно без изменений.

	Переменная хранит не сам объект, а его «адрес в памяти», другими словами «ссылку» на него. Когда переменная объекта копируется - копируется ссылка, сам же объект не дублируется.

	Два объекта равны только в том случае, если это один и тот же объект. Для сравнений двух объектов или для сравнения с примитивом, объект преобразуется в примитив.

	Если мы вызываем функцию вовсе без использования объекта, то в строгом режиме this будет являться undefined. Если мы попытаемся получить доступ к name, используя this.name – это вызовет ошибку. В нестрогом режиме значением this в таком случае будет глобальный объект (window для браузера).

	У стрелочных функций нет «this». Если происходит обращение к this , его значение берётся снаружи.

	Деструктурирующее присваивание – это специальный синтаксис, который позволяет нам «распаковать» массивы или объекты в кучу переменных, так как иногда они более удобны. Деструктурирующее присваивание не уничтожает массив. Оно вообще ничего не делает с правой частью присваивания, его задача – только скопировать нужные значения в переменные.

	Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа. В то время как объект приводит ключи к строкам.

	Объект Set – это особый вид коллекции: «множество» значений (без ключей), где каждое значение может появляться только один раз.

	======== Флаги и дескрипторы свойств =========

	Помимо значения value, свойства объекта имеют три специальных атрибута (так называемые «флаги»).
writable – если true, свойство можно изменить, иначе оно только для чтения.
enumerable – если true, свойство перечисляется в циклах, в противном случае циклы его игнорируют.
configurable – если true, свойство можно удалить, а эти атрибуты можно изменять, иначе этого делать нельзя.

	Когда мы создаём свойство «обычным способом», все флаги имеют значение true. 

	Определение свойства как неконфигурируемого – это дорога в один конец. Мы не сможем отменить это действие, потому что defineProperty не работает с неконфигурируемыми свойствами.

	Метода   Object.defineProperty(obj, propertyName, descriptor) изменяет флаги объекта. descriptior - применяемый дескриптор.

	======== Геттеры и Сеттеры =========

	Есть два типа свойст у объекта. Первый тип это свойства-данные, второй - свойства-аксессоры. По своей сути это функции, которые используются для присвоения и получения значения, но во внешнем коде они выглядят как обычные свойства объекта.

	Свойства-аксессоры представлены методами: «геттер» – для чтения и «сеттер» – для записи. При литеральном объявлении объекта они обозначаются get и set.

	














