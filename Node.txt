	Создаем функцию в условно(func.js) файле. И чтобы его подсключить, в осномной файле js прописываем команду 
let foo = require("./func");
console.log(foo);
	А в файле func.js прописываем > module.exports

	Экспорт модулей(module.exports) — это инструкции, которые сообщают Node. js, какие фрагменты кода (функции, объекты, строки и т. д.) экспортировать из данного файла, чтобы другим файлам был разрешен доступ к экспортированному коду.

	Дело в том, что Node состоит из блоков, называемых модулями, и каждый отдельный файл по своей сути — отдельный блок, чья область видимости изолирована от других таких же блоков.

	Для работы с файлами в Node. js предназначен модуль fs.

	WriteFile
Для асинхронной записи данных в файл существует метод "writeFile" модуля "fs". При этом файл будет принудительно создан при отсутствии, либо вся информация будет удалена из него, если она есть. Первым параметром этой функции передаётся название файла, вторым данные для записи. При этом в третьем параметре необходимо передать callback функцию с единственным параметром - переменной, в которую запишется ошибка. 

	ReadFile - метод для чтения файлов. Получает 3 параметра: имя файла , кодировку файла ('utf8' в примере) и функцию. Эта функция будет вызывана, когда завершится операция чтения файла. Функция получит два параметра. Первый - информация о каких-либо ошибках, второй - содержимое файла.

	Middleware в случае с HTTP-сервером в Node. JS — это промежуточный код, который выполняется до того, как начнёт выполняться ваш основной код. Это, чаще всего, нужно для того, чтобы сделать какой-то дополнительный тюнинг или проверку входящего запроса.

	send() метод XMLHttpRequest send() отправляет запрос на сервер. Если запрос является асинхронным (по умолчанию), этот метод возвращается, как только запрос отправляется, и результат доставляется с использованием событий. Если запрос является синхронным, этот метод не возвращает значение до тех пор, пока не будет получен ответ.

	Require
Установелнный пакет можно подключить в файле скрипта Node.js через require.
> let moment = require("moment");
Теперь в переменной moment будет доступна библиотека Moment.js.

	Метод listen принимает на вход номер порта, на котором создаётся сервер, и колбэк, который срабатывает после его запуска.

	Static()
Для того чтобы Node.js сервер мог передавать по запросу находящиеся у него статические файлы (изображения, аудио, HTML, CSS, JS), используется функция фреймворка Express static(). Функция должна вызываться как Middleware с использованием метода use(). Первым параметром методу use() передается начало URL, по которому будут запрашиваться файлы, а вторым параметром - место, где нужно будет их искать.











