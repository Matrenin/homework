	ООП — это способ написания кода, позволяющий создавать объекты с помощью одного объекта. 
	В ООП есть 4-е основных принципа:
1. Абстракция - отделение концепции от экзепляра.
2. Полиморфизм - реализация одной и той же задачи разными способами.
3. Наследование - способной объекта или класса базирвоаться на другом объекте или классе (главный механизм, чтобы не повторяться в коде).
4. Инкапсуляция - в один объект запаковываем данные.

	Prototype - это объект который расширяет наш объект. Мы внутри прототипа ищем свойства, если не нашли в основном объекте. У любого объекта может быть свой прототип, а может и не быть.

	Конструкторами являются функции, в которых используется ключевое слово "this".
	This - это ссылка на сам объект. В this будет лежать то, что было слева от точки в момент вызова.

	Функции которые лежат в свойстве объекта называют методами.

	Разница __proto__ и prototype:
Когда мы пишем toBeep.__proto__ - мы получаем прототип текущего объекта(toBeep). Function.prototype - это свойство у функций. И в этом свойстве лежит объект, который будет использоваться как прототип для всех объектов, которые будут созданы от этой функции конструткора(Function).

	Person.call(this, .., ..) - call вызовит функцию(Person), с этим объектом(this) внутри. Где this это тот самый объект который мы создаем. 














	