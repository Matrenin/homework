	Глобальное хранилище приложения создаётся в отдельном файле, который как правило называется store.js:
>
// Код файла store.js
import { createStore } from 'redux';
const store = createStore(reducer);
export default store;

	reducer — чистая функция которая будет отвечать за обновление состояния. Здесь реализовывается логика в соответствие с которой будет происходить обновление полей store. Функция принимает значение текущего состояния и объект события (action). Объект события содержит два свойства — это тип события (action.type) и значение события (action.value).
>
function reducer(state, action) {
    switch(action.type) {
        case ACTION_1: return { value: action.value_1 };
        case ACTION_2: return { value: action.value_2 };
        
        default: return state;
    }
}

	Что бы обновить store необходимо вызвать метод dispatch(). На самом деле передавать объект события напрямую в dispatch() является признаком плохого тона. Для этого нужно использовать функцию под названием actionCreator. Она делает ровно то что и ожидается. Создаёт событие! Вызов этой функции нужно передавать как аргумент в dispatch а в actionCreator передавать необходимое значение (value).
>
store.dispatch(action_1("Some value"));

	Actions - объект, как правило со свойством type, с помощью которого в редюсер передается информация о требуемых измненениях стейта. Это константы, описывающие событие. Обычно это просто строка с названием описывающее событие.

	Чтобы использовать store в react компонентах, нужно связать реакт компоненты с редаксом. Оборачиваем наше приложение в Provider и параметром этот компонент принимает store.
>
 <Provider store={store}></Provider>

	Чтобы как то изменить состояние, нам нужен dispatch, получить его внутри компонента мы можем с помощью хука useDispatch. Получить состояние с помощью хука useSekector, параметром он принимает функцию, а эта функция в свою очередь принимает параметром состояние.
>
const count = useSelector(state => state.count)

	========== 17.02 ===========

	В программировании мемоизация - это метод оптимизации, который делает приложения более эффективными и, следовательно, более быстрыми. Он делает это, сохраняя результаты вычислений в кэше и извлекая ту же информацию из кэша в следующий раз, когда она потребуется, вместо того, чтобы вычислять ее снова.
	Мемоизированный компанент - это компанент, который перерисовывается, когда изменяются его пропсы. Он не будет перерисовываться, когда перерисовывается его родительский компанент.

	========== КОНТЕКСТ ===========

	Контекст - это форма внедрения зависимостей. Это транспортный механизм, который ничем не управляет. Любое управление состоянием осуществляется вручную, как правило, с помощью хуков useState() / useReducer().

	С помощью контекста мы можем получить данные на любом уровне вложености, не передавая их через промежуточные компоненты, а получать напрямую через контекст. 
	Создаем контекст:
> export const MyThemeContext = React.createContext({theme: 'dark'});

	Функция createContext принимает аргументом значение переменной контекста по умолчанию. Затем нужно обернуть корневой компонент в провайдер контекста (не обязательно корневой, но самый верхний из тех, кому требуется данный контекст), и указать проп value - то значеие, которое будет передаваться в компоненты:
> <MyContext.Provider value={{ theme: 'dark' }}>
	<Router/>
   <MyContext.Provider>


	Если компонент, использующий еонтекст, не обернут в продходящий провайдер, то будет использоваться значение переменной контекста по умолчанию - то, которое было передано в createContext.

	useContext - позволяет передавать данные от родительского компонента к дочернему, минуя промежуточные.

	========== 18.02 ===========

	shouldComponentUpdate() - используется, чтобы сообщить React, если на вывод компонента не влияет текущее изменение состояние или реквизита. Поведение по умолчанию заключается в повторном рендеринге при каждом изменении состояния.

	


















	