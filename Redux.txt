	Глобальное хранилище приложения создаётся в отдельном файле, который как правило называется store.js:
>
// Код файла store.js
import { createStore } from 'redux';
const store = createStore(reducer);
export default store;

	reducer — чистая функция которая будет отвечать за обновление состояния. Здесь реализовывается логика в соответствие с которой будет происходить обновление полей store. Функция принимает значение текущего состояния и обьект события (action). Обьект события содержит два свойства — это тип события (action.type) и значение события (action.value).
>
function reducer(state, action) {
    switch(action.type) {
        case ACTION_1: return { value: action.value_1 };
        case ACTION_2: return { value: action.value_2 };
        
        default: return state;
    }
}

	Что бы обновить store необходимо вызвать метод dispatch(). На самом деле передавать объект события напрямую в dispatch() является признаком плохого тона. Для этого нужно использовать функцию под названием actionCreator. Она делает ровно то что и ожидается. Создаёт событие! Вызов этой функции нужно передавать как аргумент в dispatch а в actionCreator передавать необходимое значение (value).
>
store.dispatch(action_1("Some value"));

	Actions это константы, описывающие событие. Обычно это просто строка с названием описывающее событие.

	Чтобы использовать store в react компонентах, нужно связать реакт компоненты с редаксом. Оборачиваем наше приложение в Provider и параметром этот компонент принимает store.
>
 <Provider store={store}></Provider>

	Чтобы как то изменить состояние, нам нужен dispatch, получить его внутри компонента мы можем с помощью хука useDispatch. Получить состояние с помощью хука useSekector, параметром он принимает функцию, а эта функция в свою очередь принимает параметром состояние.
>
const count = useSelector(state => state.count) 


















	